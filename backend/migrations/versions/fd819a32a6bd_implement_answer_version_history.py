"""implement answer version history

Revision ID: fd819a32a6bd
Revises: e97c2851938c
Create Date: 2025-06-13 15:28:44.200922

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = 'fd819a32a6bd'
down_revision: Union[str, None] = 'e97c2851938c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # 1. Add new columns
    op.add_column('questions', sa.Column('answer_history', sa.TEXT(), nullable=True))
    op.add_column('questions', sa.Column('current_version_index', sa.Integer(), nullable=False, server_default='0'))

    # 2. Data migration: populate answer_history from the old answer column
    op.execute("""
        UPDATE questions
        SET answer_history = CONCAT('["', REPLACE(REPLACE(answer, '\\\\', '\\\\\\\\'), '"', '\\"'), '"]')
        WHERE answer IS NOT NULL;
    """)
    
    # 3. Now that data is migrated, drop old columns
    op.drop_column('questions', 'previous_answer')
    op.drop_column('questions', 'answer')

    # 4. Alter the server_default to None after initial population
    op.alter_column('questions', 'current_version_index', server_default=None)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # This is a destructive migration, so a perfect downgrade is complex.
    # We will restore the columns and attempt to extract the latest answer.
    op.add_column('questions', sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('previous_answer', sa.TEXT(), autoincrement=False, nullable=True))

    # Attempt to restore the 'answer' from 'answer_history'
    # This is a best-effort, and will lose history.
    op.execute("""
        UPDATE questions
        SET answer = (
            CASE
                WHEN answer_history IS NOT NULL AND json_array_length(answer_history::json) > current_version_index
                THEN (answer_history::json)->>current_version_index
                ELSE NULL
            END
        )
    """)

    op.drop_column('questions', 'current_version_index')
    op.drop_column('questions', 'answer_history')
    # ### end Alembic commands ###
